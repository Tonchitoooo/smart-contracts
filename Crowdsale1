/**Создать токены ERC20 и смарт-контракт crowdsale

Параметры:
Название токена: Alpabet
Символ токена: ABC
Количество токенов: 500000000, не меняется
HardCap = 25 000 ETH, не меняется
Price = 0.03 доллара за токен, может меняться
Дата начала crowdsale и окончания задаётся при создании контракта
Бонусная система:
Бонус 40 процентов, в течение 3х дней после старта
Бонус 30 процентов, в течение следующей недели
Бонус 20 процентов, в течение следующего месяца
Бонус 10 процентов, в течение следующего квартала.
Сроки могут меняться

50% токенов идут на продажу,
40% владельцу контракта
10% на отдельный адрес, который задаётся после создания только владельцем контракта и может меняться

Средства полученные от продажи токенов идут владельцу контракта

*/

pragma solidity ^0.4.21;
 
/**
 * @title ERC20Basic
 * @dev Simpler version of ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/179
 */
contract ERC20Basic {
  uint256 public totalSupply;
  function balanceOf(address who) constant returns (uint256);
  function transfer(address to, uint256 value) returns (bool);
  event Transfer(address indexed from, address indexed to, uint256 value);
}

/**
 * @title ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/20
 */
contract ERC20 is ERC20Basic {
  function allowance(address owner, address spender) constant returns (uint256);
  function transferFrom(address from, address to, uint256 value) returns (bool);
  function approve(address spender, uint256 value) returns (bool);
  event Approval(address indexed owner, address indexed spender, uint256 value);
}

/**
 * @title SafeMath
 * @dev Math operations with safety checks that throw on error
 */
library SafeMath {
    
  function mul(uint256 a, uint256 b) internal constant returns (uint256) {
    uint256 c = a * b;
    assert(a == 0 || c / a == b);
    return c;
  }

  function div(uint256 a, uint256 b) internal constant returns (uint256) {
    // assert(b > 0); // Solidity automatically throws when dividing by 0
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold
    return c;
  }

  function sub(uint256 a, uint256 b) internal constant returns (uint256) {
    assert(b <= a);
    return a - b;
  }

  function add(uint256 a, uint256 b) internal constant returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }
  
}

/**
 * @title Basic token
 * @dev Basic version of StandardToken, with no allowances. 
 */
contract BasicToken is ERC20Basic {
    
  using SafeMath for uint256;

  mapping(address => uint256) balances;

  /**
  * @dev transfer token for a specified address
  * @param _to The address to transfer to.
  * @param _value The amount to be transferred.
  */
  function transfer(address _to, uint256 _value) returns (bool) {
    balances[msg.sender] = balances[msg.sender].sub(_value);
    balances[_to] = balances[_to].add(_value);
    Transfer(msg.sender, _to, _value);
    return true;
  }

  /**
  * @dev Gets the balance of the specified address.
  * @param _owner The address to query the the balance of. 
  * @return An uint256 representing the amount owned by the passed address.
  */
  function balanceOf(address _owner) constant returns (uint256 balance) {
    return balances[_owner];
  }

}

/**
 * @title Standard ERC20 token
 *
 * @dev Implementation of the basic standard token.
 * @dev https://github.com/ethereum/EIPs/issues/20
 * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol
 */
contract StandardToken is ERC20, BasicToken {

  mapping (address => mapping (address => uint256)) allowed;

  /**
   * @dev Transfer tokens from one address to another
   * @param _from address The address which you want to send tokens from
   * @param _to address The address which you want to transfer to
   * @param _value uint256 the amout of tokens to be transfered
   */
  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {
    var _allowance = allowed[_from][msg.sender];

    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met
    // require (_value <= _allowance);

    balances[_to] = balances[_to].add(_value);
    balances[_from] = balances[_from].sub(_value);
    allowed[_from][msg.sender] = _allowance.sub(_value);
    Transfer(_from, _to, _value);
    return true;
  }

  /**
   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.
   * @param _spender The address which will spend the funds.
   * @param _value The amount of tokens to be spent.
   */
  function approve(address _spender, uint256 _value) returns (bool) {

    // To change the approve amount you first have to reduce the addresses`
    //  allowance to zero by calling `approve(_spender, 0)` if it is not
    //  already 0 to mitigate the race condition described here:
    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
    require((_value == 0) || (allowed[msg.sender][_spender] == 0));

    allowed[msg.sender][_spender] = _value;
    Approval(msg.sender, _spender, _value);
    return true;
  }

  /**
   * @dev Function to check the amount of tokens that an owner allowed to a spender.
   * @param _owner address The address which owns the funds.
   * @param _spender address The address which will spend the funds.
   * @return A uint256 specifing the amount of tokens still available for the spender.
   */
  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
    return allowed[_owner][_spender];
  }

}

/**
 * @title Ownable
 * @dev The Ownable contract has an owner address, and provides basic authorization control
 * functions, this simplifies the implementation of "user permissions".
 */
contract Ownable {
    
  address public owner;

  /**
   * @dev The Ownable constructor sets the original `owner` of the contract to the sender
   * account.
   */
  function Ownable() {
    owner = msg.sender;
  }

  /**
   * @dev Throws if called by any account other than the owner.
   */
  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }

  /**
   * @dev Allows the current owner to transfer control of the contract to a newOwner.
   * @param newOwner The address to transfer ownership to.
   */
  function transferOwnership(address newOwner) onlyOwner {
    require(newOwner != address(0));      
    owner = newOwner;
  }

}

/**
 * @title Burnable Token
 * @dev Token that can be irreversibly burned (destroyed).
 */
contract BurnableToken is StandardToken {

  /**
   * @dev Burns a specific amount of tokens.
   * @param _value The amount of token to be burned.
   */
  function burn(uint _value) public {
    require(_value > 0);
    address burner = msg.sender;
    balances[burner] = balances[burner].sub(_value);
    totalSupply = totalSupply.sub(_value);
    Burn(burner, _value);
  }

  event Burn(address indexed burner, uint indexed value);

}

contract SimpleCoinToken is BurnableToken {
    
  string public constant name = "Alpabet";
   
  string public constant symbol = "ABC";
    
  uint32 public constant decimals = 18;

  uint256 public INITIAL_SUPPLY = 500000000 * 1 ether;

  function SimpleCoinToken() {
    totalSupply = INITIAL_SUPPLY;
    balances[msg.sender] = INITIAL_SUPPLY;
  }
    
}

contract Crowdsale is Ownable {
    
  using SafeMath for uint;
    
  address multisig;

  address restricted;

  SimpleCoinToken public token = new SimpleCoinToken();

  uint start;
  
  uint finish;
    


  uint rate;
  
  uint public price;
  
  uint public BonusData;
  
  uint public Date1;
  uint public Date2;
  uint public Date3;
  uint public Date4;
    
  function setPrice(uint newPrice) public onlyOwner {
        price = newPrice;
    }

  function Crowdsale() {
    multisig = 0xEA15Adb66DC92a4BbCcC8Bf32fd25E2e86a2A770;
    restricted = 0xb3eD172CC64839FB0C0Aa06aa129f402e994e7De;
    rate = ((price.div(3).mul(100)).mul(1000000000000000000));
    start = 1525562603;
    finish = 1557098603;
  }

  modifier saleIsOn() {
    require(now > start && now < start + Date4 * 1 days);
    _;
  }
      
    function setMultisig(address newMultisig) public onlyOwner
    {
        multisig = newMultisig;
    }
    
   function setBonusData(uint newBonusData) public onlyOwner {
        BonusData = newBonusData;
    }
     
    function setData(uint newDate1, uint newDate2, uint newDate3,  uint newDate4 ) public onlyOwner { 
        require (Date1 < Date2 && Date2 < Date3  && Date3 < Date4);
Date1 = newDate1; 
Date2 = newDate2; 
Date3 = newDate3; 
Date4 = newDate4; 
    }
    
  function createTokens() saleIsOn payable {
    multisig.transfer(msg.value);
    uint tokens = rate.mul(msg.value).div(1 ether);
    uint bonusTokens = 0;
   
if(now < start + (Date1 * 1 days)) { 
bonusTokens = tokens.div(5).mul(2); 
} else if(now >= start + (Date1 * 1 days) && now < start + (Date2 *1 days)) { 
bonusTokens = tokens.div(10).mul(3); 
} else if(now >= start +  (Date2*1 days) && now < start + (Date3*1 days)) { 
bonusTokens = tokens.div(5); 
} else if(now >= start + (Date3*1 days) && now < start + (Date4* 1 days)) { 
bonusTokens = tokens.div(10); 
}
    
uint tokensWithBonus = tokens.add(bonusTokens); 
token.transfer(msg.sender, tokensWithBonus); 
uint restrictedTokens = tokensWithBonus.mul(8).div(10); 
token.transfer(restricted, restrictedTokens);
uint rerestrictedTokens = tokensWithBonus.mul(2).div(10); 
token.transfer(multisig, rerestrictedTokens);

  }

  function() external payable {
    createTokens();
  }
    
}
